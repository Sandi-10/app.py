# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XuVf-kHBxUWcj82Qg3WHTuySpb1XtivF
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# --- Load data ---
@st.cache_data
def load_data():
    df = pd.read_csv('olist_order_reviews_dataset.csv')
    df['satisfaction'] = df['review_score'].apply(lambda x: 1 if x >= 4 else 0)
    return df

df = load_data()

# --- Train model ---
def train_model(df):
    X = df[['review_score']]
    y = df['satisfaction']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    rf = RandomForestClassifier(n_estimators=100)
    rf.fit(X_train, y_train)
    return rf

model = train_model(df)

# --- Streamlit UI ---
st.title("📦 Prediksi Kepuasan Pelanggan E-Commerce (Olist Dataset)")

menu = st.sidebar.radio("Navigasi", ["📊 Dataset & Visualisasi", "🧠 Model & Evaluasi", "📝 Form Prediksi"])

# Halaman 1: Visualisasi Dataset
if menu == "📊 Dataset & Visualisasi":
    st.header("📊 Dataset Ulasan Pelanggan")
    st.write(df.head())

    st.subheader("Distribusi Skor Ulasan")
    st.bar_chart(df['review_score'].value_counts().sort_index())

    st.subheader("Distribusi Label Kepuasan (Puas vs Tidak Puas)")
    st.bar_chart(df['satisfaction'].value_counts())

# Halaman 2: Model & Evaluasi
elif menu == "🧠 Model & Evaluasi":
    st.header("🧠 Evaluasi Model Random Forest")
    X = df[['review_score']]
    y = df['satisfaction']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    acc = model.score(X_test, y_test)
    st.write(f"Akurasi model: **{round(acc * 100, 2)}%**")

# Halaman 3: Formulir Prediksi
elif menu == "📝 Form Prediksi":
    st.header("📝 Prediksi Kepuasan Berdasarkan Skor Ulasan")

    score = st.slider("Masukkan Skor Ulasan (1–5)", min_value=1, max_value=5, step=1)
    input_df = pd.DataFrame({'review_score': [score]})

    prediction = model.predict(input_df)[0]
    prob = model.predict_proba(input_df)[0][1]

    st.write("Hasil Prediksi:")
    if prediction == 1:
        st.success("✅ Pelanggan Diprediksi **Puas**")
    else:
        st.error("❌ Pelanggan Diprediksi **Tidak Puas**")

    st.write(f"🔍 Probabilitas Kepuasan: **{round(prob * 100, 2)}%**")

pip install streamlit pandas scikit-learn

